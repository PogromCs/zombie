/* Script generated by Pawn Studio */

#include <amxmodx>
#include <amxmisc>
#include <nvault>
#include <nvault_util>
#include <zp50_ammopacks>
#include <ColorChat>
#define PLUGIN	"Bank AP"
#define AUTHOR	"DarkGL"
#define VERSION	"1.0"



const maxPlayer = 33;

const MAX_LEN_STRUCT = 256;
new const prefix[] = "BANK"
enum structPlayer {
	accountCreated,
	accountName[ MAX_LEN_STRUCT ],
	accountPin[ MAX_LEN_STRUCT ],
	accountValue,
	accountLogged,
	accountTry,
	accountLimitValue,
	accountAuth,
	accountDebt
}
native zp_ap_set(id,ilosc);
new vaultHandle;
new const reklama[][] = {
"^x01 Aby po zmianie mapy AP sie samo zapisalo musisz byc zalogowany w banku!",
"^x01 Wpisz /bank aby sie zalogowa lub zrobic konto oraz wyplacac/wplacac AP",
"^x01 Wpisz /wplac ilosc lub /deposit ilosc (gdzie ilsoc to ilosc ap lub all) aby wplacic swoje AP do banku",
"^x01 Wpisz /bank pin (gdzie pin to twoj pin) aby sie zalogowac",
"^x01 Wpisz /wyplac ilosc lub /withdraw ilosc (gdzie ilsoc to ilosc ap lub all) aby wyplacic swoje AP z banku"

}
new playersInformations[ maxPlayer ][ structPlayer ];

//new iTransfer[ maxPlayer ];

public plugin_init(){
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_clcmd( "say" , "SayHandle" );
	register_clcmd( "say_team" , "SayHandle" );
	
	register_clcmd( "NumerPin" , "handlePinNumber" );
	register_clcmd( "PinNumberOld" , "handlePinNumberOld" );
	register_clcmd( "Wplacap" , "handleWplacAmmo" );
	register_clcmd( "Wyplacap" , "handleWyplacAmmo" );
	
	register_clcmd( "DebtGet" , "handleDebt" );
	set_task(60.0,"reklamy",1336,_,_,"b")
	vaultHandle = nvault_open( "BankDataBase" );
}
public reklamy(id)
{
	ColorChat(0,GREEN,"[%s] %s",prefix,reklama[random(sizeof(reklama))])
	
}
public plugin_natives(){
register_native("powieksz_bank","native_powieksz_bank",1)
}
public native_powieksz_bank(id)
{
	if(!is_user_connected(id)){
		log_error(AMX_ERR_NATIVE,"[GW] Invalid player (%d)",id)
		return PLUGIN_HANDLED
	}
	new amount = 50
	if(getAccountLimit(id)+amount>1400)
	{
		amount = 1400 - getAccountLimit(id)
	}
	setAccountLimit(id,getAccountLimit(id) + amount )
	return PLUGIN_CONTINUE
	
}
public plugin_end(){
	nvault_close( vaultHandle );
}
public SayHandle(id)
{	
	new arg[191],arg1[32],arg2[33],arg3[6]
	read_args(arg,sizeof arg)
	remove_quotes(arg)
	
	arg1[0]= '^0'
	arg2[0]= '^0'
	arg3[0]= '^0'
	parse(arg,arg1,sizeof (arg1)-1,arg2,sizeof (arg2)-1,arg3,sizeof (arg3)-1)
	new playerName[ 256 ],steamid[64],ip[64]
	get_user_ip(id,ip,sizeof ip,1)
	get_user_name( id , playerName , charsmax( playerName ) );
	get_user_authid(id,steamid,sizeof steamid)
	if(arg3[0] == 0)
	{	
		if ((equali(arg1,"/bank") ||equali(arg1,"bank")) )
		{
			if(arg2[0] != 0)
			{	if(getAccountLogged(id)){
					ColorChat(id,GREEN,"[%s] ^x01 Jestes juz zalogowany",prefix)
					return PLUGIN_HANDLED
				
				}
				if(getAccountCreated(id)){
					
					trim(arg2)
					if( loginToAccount(id,arg2)){
						ColorChat(id,GREEN,"[%s] ^x01 Pin poprawny, zostales zalogowany",prefix)
						return PLUGIN_HANDLED
					}
					else {
						ColorChat(id,GREEN,"[%s] ^x01 Nie poprawny pin",prefix)
						return PLUGIN_HANDLED
					}
				}
				else 
				{
					ColorChat(id,GREEN,"[%s] ^x01 Wpisz /bank i zaloz konto",prefix)
					return PLUGIN_HANDLED
				}
				return PLUGIN_HANDLED
			}
			else 
			{	
				bankMenu( id )
			}
		}
		/*
		if(equali(arg1,"/withdraw") || equali(arg1,"withdraw") || equali(arg1,"/wyplac") || equali(arg1,"wyplac"))
		{	
			if(!getAccountCreated(id) || !getAccountLogged(id))
			{
				ColorChat(id,GREEN,"[%s] ^x01 Zaloz konto /bank  lub zaloguj sie /bank pin",prefix)
				return PLUGIN_HANDLED
			}
			if(arg2[0] == 0)
			{
				ColorChat(id,GREEN,"[%s] ^x01 Nie podano ilosci ap",prefix)
				return PLUGIN_HANDLED
			}
			new ap
			if(equali(arg2,"all"))
			{	
				ap = getAccountValue(id)
				zp_ap_set(id,zp_ammopacks_get(id) + ap)
				setAccountValue(id, 0)
				ColorChat(id,GREEN,"[%s] ^x01 Wyplaciles z banku %d ",prefix ,ap)
				log_to_file("bankAp.txt","Gracz %s wyplacil z banku %d ap. (%d / %d) <%s> <%s>",playerName,ap,getAccountValue(id),getAccountLimit(id),steamid,ip)
			}
			else {
				ap= str_to_num(arg2)
				if(ap <0)
				{
					ColorChat(id,GREEN,"[%s] ^x01 Nie prawidlowa ilosc ap",prefix)
					return PLUGIN_HANDLED
				}
				if(ap > getAccountValue(id))
					ap = getAccountValue(id)
				zp_ap_set(id,zp_ammopacks_get(id) + ap)
				if(ap > 0 )
				{
					setAccountValue(id, getAccountValue(id) - ap)
					ColorChat(id,GREEN,"[%s] ^x01 Wyplaciles z banku %d ap. Na koncie masz %d ap",prefix,ap,getAccountValue(id))
					log_to_file("bankAp.txt","Gracz %s wyplacil z banku %d ap. (%d / %d) <%s> <%s>",playerName,ap,getAccountValue(id),getAccountLimit(id),steamid,ip)
				}
				
			}
		}
		if(equali(arg1,"/deposit") || equali(arg1,"deposit") || equali(arg1,"/wplac") || equali(arg1,"wplac"))
		{	
			if(!getAccountCreated(id) || !getAccountLogged(id))
			{
				ColorChat(id,GREEN,"[%s] ^x01 Zaloz konto /bank  lub zaloguj sie /bank pin",prefix)
				return PLUGIN_HANDLED
			}
			if(arg2[0] == 0)
			{
				ColorChat(id,GREEN,"[%s] ^x01 Nie podano ilosci ap",prefix)
				return PLUGIN_HANDLED
			}
			if(getAccountValue(id) == getAccountLimit(id))
			{
				ColorChat(id,GREEN,"[%s] ^x01 Twoj bank jest pelny",prefix)
				return PLUGIN_HANDLED
			}
			new ap,ap2,temp
			if(equali(arg2,"all"))
			{	
				ap = zp_ammopacks_get(id)
				=
				if(ap + getAccountValue(id) > getAccountLimit(id))
				{
					ap2 = getAccountLimit(id) - getAccountValue(id)
					
				}
				
				
				
				if(ap >0 ){
					setAccountValue(id, getAccountValue(id) + ap)
					ColorChat(id,GREEN,"[%s] ^x01 Wplaciles do banku %d",prefix,ap)
					zp_ap_set(id,zp_ammopacks_get(id) - ap)
					log_to_file("bankAp.txt","Gracz %s wplacil do banku %d ap. (%d / %d) <%s> <%s>",playerName,ap,getAccountValue(id),getAccountLimit(id),steamid,ip)
				}
				else zp_ap_set(id,0)
				
			}
			else 
			{
				ap = str_to_num(arg2)
				
				if(ap <0)
				{
					ColorChat(id,GREEN,"[%s] ^x01 Nie prawidlowa ilosc ap",prefix)
					return PLUGIN_HANDLED
				}
				if(ap > zp_ammopacks_get(id))
					ap = zp_ammopacks_get(id)
				ap2 = ap
				
				if( getAccountDebt( id ) > 0 ){
					if( getAccountDebt( id ) < ap ){
						ap -= getAccountDebt(id)
						log_to_file("bankAp.txt","Gracz %s splacil cala pozyczke<%s> <%s>",playerName,steamid,ip)
						ColorChat(id,GREEN,"[%s] ^x01 Splaciles cala pozyczke",prefix)
						setAccountDebt( id , 0 );
					}
					else {	
						ColorChat(id,GREEN,"[%s] ^x01 Splaciles %d ap z %d  ap z pozyczki",prefix,ap, getAccountDebt(id))
						setAccountDebt( id , getAccountDebt( id ) - ap )
						log_to_file("bankAp.txt","Gracz %s splacil %d ap z pozyczki. Pozostalo mu jeszcze  %d do splacenia<%s> <%s>",playerName,ap,getAccountDebt(id)+ap,steamid,ip)
						
						;
						ap= 0;
					}
				}
				if(ap + getAccountValue(id) >= getAccountLimit(id))
				{
					ap2 = getAccountLimit(id) - getAccountValue(id) + ap
					ap = getAccountLimit(id) - getAccountValue(id)
					
				}
				if(ap2 >0 ){
					setAccountValue(id, getAccountValue(id) + ap)
					ColorChat(id,GREEN,"[%s] ^x01 Wplaciles do banku %d ap. Na koncie masz %d ap",prefix,ap,getAccountValue(id))
					log_to_file("bankAp.txt","Gracz %s wplacil do banku %d ap. (%d / %d) <%s> <%s>",playerName,ap,getAccountValue(id),getAccountLimit(id),steamid,ip)
					zp_ap_set(id,zp_ammopacks_get(id) - ap2)
				}
				else zp_ap_set(id, 0)
			}
		
		}	*/
		
	}
	//else 
	//{
	//	if(equali(arg1, "/przelej"))
	//	ColorChat(id,GREEN,"test")
	//}
	return PLUGIN_CONTINUE
	
}
public client_connect( id ){
	clearUserInformations( id );
	
	new szName[ 256 ];
	
	get_user_name( id , szName , charsmax( szName ) );
	replace_all(szName,charsmax(szName)," ","_")
	setAccountName( id , szName );
	
	loadUserInformations( id );
}

public client_disconnect( id ){
	saveUserInformations( id );
	
	clearUserInformations( id );
}

public bankMenu( id ){
	if( !getAccountCreated( id ) ){
		menuCreateAccount( id );
		
		return PLUGIN_HANDLED;
	}
	
	if( !getAccountLogged( id ) ){
	
		client_cmd( id , "messagemode NumerPin" );
	
		client_print( id , print_chat , "[BANK] Podaj numer pin" );
	
		return PLUGIN_HANDLED;
	}
	
	mainMenu( id );
	
	return PLUGIN_HANDLED;
}

public menuCreateAccount( id ){
	new pMenu = menu_create( "Tworzenie konta" , "menuCreateHandle" );
	
	menu_additem( pMenu , "Chesz zalozyc konto ?" );
	
	menu_setprop( pMenu , MPROP_BACKNAME , "Wyjdz" );
	
	menu_display( id , pMenu );
}

public menuCreateHandle( id , menu , item ){
	if( item == MENU_EXIT ){
		menu_destroy( menu );
		return PLUGIN_HANDLED;
	}
	
	if( item == 0 ){
		client_cmd( id , "messagemode NumerPin" );
		
		client_print( id , print_chat , "[BANK] Podaj kod pin do konta" );
	}
	
	menu_destroy( menu );
	return PLUGIN_HANDLED;
}

public handlePinNumberOld( id ){
	new szData[ 128 ];
	
	read_argv( 1 , szData , charsmax( szData ) );
	
	trim( szData );
	
	if( strlen( szData ) == 0 ){
		return PLUGIN_HANDLED;
	}
	
	new szPin[ MAX_LEN_STRUCT ];
	
	getAccountPin( id , szPin , charsmax( szPin ) );
	
	if( strcmp( szPin , szData ) != 0 ){
		client_print( id , print_chat , "[BANK] Zly stary pin" );
		
		setAccountAuth( id , false );
		
		return PLUGIN_HANDLED;
	}
	
	setAccountAuth( id , true );
	
	client_cmd( id , "messagemode NumerPin" );
	
	return PLUGIN_HANDLED;
}

public handlePinNumber( id ){
	new szData[ 128 ];
	
	read_argv( 1 , szData , charsmax( szData ) );
	
	trim( szData );
	new playerName[ 256 ],steamid[64],ip[64]
	get_user_ip(id,ip,sizeof ip,1)
	get_user_name( id , playerName , charsmax( playerName ) );
	get_user_authid(id,steamid,sizeof steamid)
	if( strlen( szData ) == 0 ){
		return PLUGIN_HANDLED;
	}
	
	if( getAccountLogged( id ) ){
		if( getAccountAuth( id ) ){
			setAccountPin( id , szData );
			
			setAccountAuth( id , false );
		}
	}
	else if( getAccountCreated( id ) ){
		if( loginToAccount( id , szData ) ){
			client_print( id , print_chat , "[BANK] Zostales zalogowany" );
			log_to_file("bankAp.txt","Gracz %s zalogowal sie do banku <%s> <%s>",playerName,steamid,ip)
		}
		else{
			client_print( id , print_chat , "[BANK] Zly kod pin" );
			
			setAccountTry( id , getAccountTry( id ) + 1 );
			
			if( getAccountTry( id ) >= 3 ){
			
				server_cmd( "kick ^"%s^" ^"Zbyt duzo razy wpisywales zly kod pin^"" , playerName );
				log_to_file("bankAp.txt","Gracz %s wpisal 3 razy zle haslo <%s> <%s>",playerName,steamid,ip)
			}
		}
	}
	else {
		if( createAccount( id , szData) ){
			client_print( id , print_chat , "Konto zostalo utworzone i zostales zalogowany" );
			new playerName[ 256 ],steamid[64],ip[64]
			get_user_ip(id,ip,sizeof ip,1)
			get_user_name( id , playerName , charsmax( playerName ) );
			get_user_authid(id,steamid,sizeof steamid)
			
			log_to_file("bankAp.txt","Gracz %s stworzyl konto w banku<%s> <%s>",playerName,steamid,ip)
		}
	}
	
	return PLUGIN_HANDLED;
}

public handleWplacAmmo( id ){
	if( !getAccountLogged( id ) ){
		return PLUGIN_HANDLED;
	}
	
	new szAmmount[ 16 ] ,
		iAmmount = 0,
		iDiffrenceAccount;
	
	read_argv( 1 , szAmmount , charsmax( szAmmount ) );
	
	trim( szAmmount );
	
	iAmmount = str_to_num( szAmmount );
	
	if( iAmmount <= 0 ){
		client_print( id , print_chat , "[BANK] Niepoprawna liczba ap" );
		
		return PLUGIN_HANDLED;
	}
	
	if( iAmmount > zp_ammopacks_get(id)){
		iAmmount = zp_ammopacks_get( id );
	}
	
	iDiffrenceAccount = getAccountLimit( id ) - getAccountValue( id );
	
	if( iDiffrenceAccount < iAmmount ){
		iAmmount = iDiffrenceAccount;
	}
	new playerName[ 256 ],steamid[64],ip[64]
	get_user_ip(id,ip,sizeof ip,1)
	get_user_name( id , playerName , charsmax( playerName ) );
	get_user_authid(id,steamid,sizeof steamid)
	client_print( id , print_chat , "[BANK] Na konto przetransferowano %d ap. Do limitu na koncie zostalo %d ap" , iAmmount,  iDiffrenceAccount-iAmmount ); 
	
	zp_ap_set( id , zp_ammopacks_get( id ) - iAmmount );
	
	if( getAccountDebt( id ) > 0 ){
		if( getAccountDebt( id ) < iAmmount ){
			iAmmount -= getAccountDebt( id );
			log_to_file("bankAp.txt","Gracz %s splacil cala pozyczke<%s> <%s>",playerName,steamid,ip)
			setAccountDebt( id , 0 );
		}
		else {
			setAccountDebt( id , getAccountDebt( id ) - iAmmount );
			log_to_file("bankAp.txt","Gracz %s splacil %d ap z pozyczki. Pozostalo mu jeszcze  %d do splacenia<%s> <%s>",playerName,iAmmount,getAccountDebt(id),steamid,ip)
			
			
			iAmmount = 0;
		}
	}
	
	
	setAccountValue( id , getAccountValue( id ) + iAmmount );
	log_to_file("bankAp.txt","Gracz %s wplacil do banku %d ap. Na koncie ma %d <%s> <%s>",playerName,iAmmount,getAccountValue( id ),steamid,ip)
	
	return PLUGIN_HANDLED;
}

public handleWyplacAmmo( id ){
	if( !getAccountLogged( id ) ){
		return PLUGIN_HANDLED;
	}
	
	new szAmmount[ 16 ] ,
		iAmmount = 0;
	
	read_argv( 1 , szAmmount , charsmax( szAmmount ) );
	
	trim( szAmmount );
	
	iAmmount = str_to_num( szAmmount );
	
	if( iAmmount <= 0 ){
		client_print( id , print_chat , "[BANK] Niepoprawna liczba ap" );
		
		return PLUGIN_HANDLED;
	}
	
	if( iAmmount > getAccountValue( id ) ){
		iAmmount = getAccountValue( id );
	}
	new playerName[ 256 ],steamid[64],ip[64]
	get_user_ip(id,ip,sizeof ip,1)
	get_user_name( id , playerName , charsmax( playerName ) );
	get_user_authid(id,steamid,sizeof steamid)
	setAccountValue( id , getAccountValue( id ) - iAmmount );
	log_to_file("bankAp.txt","Gracz %s wyplacil z banku %d ap. Na koncie ma %d ap<%s> <%s>",playerName,iAmmount,getAccountValue( id ),steamid,ip)
	zp_ap_set(id, zp_ammopacks_get(id) + iAmmount );

	client_print( id , print_chat , "[BANK] Wyplaciles %d ap" , iAmmount );
	
	return PLUGIN_HANDLED;
}

public handleDebt( id ){
	if( !getAccountLogged( id ) ){
		return PLUGIN_HANDLED;
	}
	
	new szAmmount[ 16 ] ,
		iAmmount = 0;
	
	read_argv( 1 , szAmmount , charsmax( szAmmount ) );
	
	trim( szAmmount );
	
	iAmmount = str_to_num( szAmmount );
	
	if( iAmmount <= 0 ){
		client_print( id , print_chat , "[BANK] Niepoprawna liczba ap" );
		
		return PLUGIN_HANDLED;
	}
	
	if( iAmmount > 100 || iAmmount + getAccountDebt( id ) > 100 ){
		client_print( id , print_chat , "[BANK] Mozesz sie zadluzyc maksymalnie do 100 ap" );
		
		return PLUGIN_HANDLED;
	}
	
	zp_ap_set( id , zp_ammopacks_get( id ) + iAmmount );
	new playerName[ 256 ],steamid[64],ip[64]
	get_user_ip(id,ip,sizeof ip,1)
	get_user_name( id , playerName , charsmax( playerName ) );
	get_user_authid(id,steamid,sizeof steamid)
	setAccountDebt(id,getAccountDebt( id ) + iAmmount)
	log_to_file("bankAp.txt","Gracz %s wzial pozyczke z banku %d ap. <%s> <%s>",playerName,iAmmount,steamid,ip)
	client_print( id , print_chat , "[BANK] Pozyczyles %d ap" , iAmmount );
	
	
	return PLUGIN_HANDLED;
}

public mainMenu( id ){
	
	new szDebt[ 128 ];
	
	formatex( szDebt , charsmax( szDebt ) , "/ Aktualnie pozyczyles %d ap" , getAccountDebt( id ) );
	
	new szTitle[ 256 ];
	
	formatex( szTitle , charsmax( szTitle ) , "Menu konta / LIMIT %d / ilosc ap %d %s" ,getAccountLimit( id ) , getAccountValue( id ) , getAccountDebt( id ) ? szDebt : "" );
	
	new pMenu = menu_create( szTitle , "mainMenuHandle" );
	
	menu_additem( pMenu , "Wplac ap" );
	menu_additem( pMenu , "Wyplac ap" );
	menu_additem( pMenu , "Ustawienia ( zmiana pinu )" );
	menu_additem( pMenu , "Ulepszenie Konta ( Zwiekszenie Limitu Banku )" );
	menu_additem( pMenu , "Najbogatsi Gracze Serwera" );
	menu_additem( pMenu , "Pozyczka" );
	menu_setprop( pMenu , MPROP_BACKNAME , "Wroc" );
	menu_setprop( pMenu , MPROP_NEXTNAME , "Dalej" );
	menu_setprop( pMenu , MPROP_EXITNAME , "Wyjdz" );
	menu_display( id , pMenu );
}

public mainMenuHandle( id , menu , item ){
	if( item == MENU_EXIT ){
		menu_destroy( menu );
		
		return PLUGIN_HANDLED;
	}
	
	switch( item ){
		case 0 : {
			client_print( id , print_chat , "[BANK] Ile chcesz wplacic ap ?" );
			
			client_cmd( id , "messagemode Wplacap" );
		}
		case 1 : {
			client_print( id , print_chat , "[BANK] Ile chcesz wyplacic ap ?" );
			
			client_cmd( id , "messagemode Wyplacap" );
		}
		case 2 : {
			setAccountAuth( id , false );
			client_print( id , print_chat , "[BANK] Wpisz stary pin" );
			client_cmd( id , "messagemode PinNumberOld" );
		}
		case 3 : {
			new cost = 100;
			new temp = (getAccountLimit(id) - 400)/100
			new limit = 1000
			if(get_user_flags(id) & ADMIN_LEVEL_H && !access(id,ADMIN_USER))
				limit = 1200
			for (new i = 0; i<temp;i++)
				cost+=50
			if( zp_ammopacks_get( id ) < cost ){
				client_print( id , print_chat , "[BANK] Masz za malo ap potrzebujesz %d",cost );
			}
			else if( getAccountLimit( id ) >= limit ){
				client_print( id , print_chat , "[BANK] Nie mozesz juz ulepszac konta" );
			}
			else {
				new iAddValue = 100;
				
				if( limit - getAccountLimit( id ) < 100 ){
					iAddValue = limit - getAccountLimit( id );
				}
				
				new playerName[ 256 ],steamid[64],ip[64]
				get_user_ip(id,ip,sizeof ip,1)
				get_user_name( id , playerName , charsmax( playerName ) );
				get_user_authid(id,steamid,sizeof steamid)				
				zp_ap_set( id , zp_ammopacks_get( id ) - cost);
				log_to_file("bankAp.txt","Gracz %s zwiekszyl limit swojego banku z %d do %d <%s> <%s>",playerName,getAccountLimit( id ),getAccountLimit( id ) + iAddValue,steamid,ip)
				setAccountLimit( id , getAccountLimit( id ) + iAddValue );
				
				client_print( id , print_chat , "[BANK] Ulepszyles konto do %d limitu" , getAccountLimit( id ) );
			}
		}
		case 4 : {
			
			delete_file( "tmpAccount.html" );
			
			new handleUtil = nvault_util_open( "BankDataBase" );
			
			new iAmountTotal = nvault_util_count( handleUtil );
			
			new iRet , iPos;
			new szKey[ 256 ] , szData[ 256 ] , iTimeStamp;
			
			new szText[ 256 ];
			
			new accountInformation[ structPlayer ];
			
			new Array: arrayAccounts = ArrayCreate( 1 , sizeof accountInformation ); 
			
			new szPin[ 256 ] ,
				szValue[ 16 ] ,
				szLimit[ 16 ];
			
			for ( new iCurrent = 1 ; iCurrent <= iAmountTotal ; iCurrent++ ){
				new accountInformationSecond[ structPlayer ]; // Im really tired today sorry
				
				iPos = nvault_util_read( handleUtil , iPos , szKey , charsmax( szKey ) , szData , charsmax( szData ) , iTimeStamp );
					
				copy( accountInformationSecond[ accountName ] , MAX_LEN_STRUCT - 1 , szKey );
				
				replace_all( szData , charsmax( szData ) , "#" , " " );
	
				parse( szData , szPin , charsmax( szPin ) , szValue , charsmax( szValue ) , szLimit , charsmax( szLimit ) );
				
				accountInformationSecond[ accountValue ] = str_to_num( szValue );
				
				ArrayPushArray( arrayAccounts , accountInformationSecond );

			}
			
			new iBorder = min( 10 , ArraySize( arrayAccounts ) );
			
			for( new iCurrentElement = 0 ; iCurrentElement < iBorder ; iCurrentElement++ ){
				
				new iBiggestNow = 0 ,
					iID = -1;
				
				for( new iCurrentElement2 = 0 ; iCurrentElement2 < ArraySize( arrayAccounts ) ; iCurrentElement2++ ){
					ArrayGetArray( arrayAccounts , iCurrentElement2 , accountInformation );
					
					if( iBiggestNow < accountInformation[ accountValue ] ){
						iBiggestNow = accountInformation[ accountValue ];
						iID = iCurrentElement2;
					}
				}
				
				if( iID != -1 ){
					ArrayGetArray( arrayAccounts , iID , accountInformation );
					
					formatex( szText , charsmax( szText ) , "%d. %s - %d</br>" , iCurrentElement + 1 , accountInformation[ accountName ] , accountInformation[ accountValue ] );
				
					write_file( "tmpAccount.html" , szText ); 
					
					ArrayDeleteItem( arrayAccounts , iID );
				}
			}
			
			show_motd( id , "tmpAccount.html" , "10 Najbogatszych Graczy Serwera" );
			
			ArrayDestroy( arrayAccounts );
			
			nvault_util_close( handleUtil );
			
			#pragma unused iRet
		}
		case 5 : {
			client_print( id , print_chat , "[BANK] Mozesz sie zadluzyc maksymalnie do 100 ap" );
			
			client_cmd( id , "messagemode DebtGet" );
		}
	}
	
	menu_destroy( menu );
	
	return PLUGIN_HANDLED;
}

public sortDescending( Array: array , itemFirst , itemSecond ){
	new accountInformationFirst[ structPlayer ] ,
		accountInformationSecond[ structPlayer ];
		
	ArrayGetArray( array , itemFirst , accountInformationFirst );
	ArrayGetArray( array , itemSecond , accountInformationSecond );
	
	if( accountInformationFirst[ accountValue ] > accountInformationSecond[ accountValue ] ){
		return 1;
	}
	else if( accountInformationFirst[ accountValue ] < accountInformationSecond[ accountValue ] ){
		return -1;
	}
	
	
	return 0;
}
/*
public menuTransfer( id ){
	new szName[ 256 ] ,
		szID[ 16 ];
	
	new pMenu = menu_create( "Wybierz gracza" , "menuTransferHandle" );
	
	for( new iPlayer = 1 ; iPlayer < maxPlayer ; iPlayer++ ){
		if( !is_user_connected( iPlayer ) || id == iPlayer || !getAccountLogged( iPlayer ) ){
			continue;
		}
		
		num_to_str( iPlayer , szID , charsmax( szID ) );
		
		get_user_name( iPlayer , szName , charsmax( szName ) );
		
		menu_additem( pMenu , szName , szID );
	}
	
	menu_display( id , pMenu );
}

public menuTransferHandle( id , menu , item ){
	if( item == MENU_EXIT ){
		menu_destroy( menu );
		return PLUGIN_HANDLED;
	}
	
	new access , szInfo[ 32 ], name[ 256 ] , callback;

	menu_item_getinfo( menu , item , access, szInfo , charsmax( szInfo ) , name , charsmax( name ) , callback );
	
	new idFound = str_to_num( szInfo );
	
	if( !is_user_connected( idFound ) || !getAccountLogged( idFound ) ){
		menu_destroy( menu );
		return PLUGIN_HANDLED;
	}
	
	client_print( id , print_chat , "[BANK] Ile chcesz przekazac ?" );
	
	iTransfer[ id ] = idFound;
	
	client_cmd( id , "messagemode Transferap" );
	
	menu_destroy( menu );
	return PLUGIN_HANDLED;
}
*/
bool: loginToAccount( id , szData[] ){
	if( getAccountLogged( id ) ){
		return false;
	}
	
	new szPin[ MAX_LEN_STRUCT ];
	
	getAccountPin( id , szPin , charsmax( szPin ) );
	
	if( strcmp( szPin , szData ) != 0 ){
		
		return false;
	}
	
	setAccountLogged( id , true );
	setAccountTry( id , 0 );
	
	mainMenu( id );
	
	return true;
}

bool:createAccount( id , szPin[] ){
	if( getAccountCreated( id ) ){
		return false;
	}
	
	setAccountCreated( id , true );
	setAccountPin( id , szPin );
	setAccountLogged( id , true );
	setAccountLimit( id , 400 );
	setAccountDebt( id , 0 );
	
	return true;
}

loadUserInformations( id ){
	new szData[ 256 ],
		szKey[ MAX_LEN_STRUCT ];
		
	
	getAccountName( id , szKey , charsmax( szKey ) );
	
	nvault_get( vaultHandle , szKey , szData , charsmax( szData ) );
	
	if( strcmp( szData , "" ) == 0 ){
		setAccountCreated( id , false );
		
		return;
	}
	
	new szPin[ 256 ] ,
		szValue[ 16 ] ,
		szLimit[ 16 ] ,
		szDebt[ 16 ];
	
	replace_all( szData , charsmax( szData ) , "#" , " " );
	
	parse( szData , szPin , charsmax( szPin ) , szValue , charsmax( szValue ) , szLimit , charsmax( szLimit ) , szDebt , charsmax( szDebt ) );
	
	setAccountPin( id , szPin );
	setAccountValue( id , str_to_num( szValue ) );
	setAccountLimit( id , str_to_num( szLimit ) );
	setAccountDebt( id , str_to_num( szDebt ) );
	
	setAccountCreated( id , true );
	
}

saveUserInformations( id ){
	if( !getAccountLogged( id ) ){
		return ;
	}
	
	new szData[ 256 ],
		szKey[ MAX_LEN_STRUCT ];
	
	new pinNumber[ MAX_LEN_STRUCT ];
	new playerName[ 256 ],steamid[64],ip[64]
	get_user_ip(id,ip,sizeof ip,1)
	get_user_name( id , playerName , charsmax( playerName ) );
	get_user_authid(id,steamid,sizeof steamid)
	getAccountName( id , szKey , charsmax( szKey ) );
	
	getAccountPin( id , pinNumber , charsmax( pinNumber ) );
	if(zp_ammopacks_get(id) + getAccountValue(id) <= getAccountLimit(id)){
		setAccountValue(id, getAccountValue(id) + zp_ammopacks_get(id))
		log_to_file("bankAp.txt","Gracz %s wplacil do banku %d ap. (%d / %d) <%s> <%s>",playerName,zp_ammopacks_get(id),getAccountValue(id),getAccountLimit(id),steamid,ip)
	}
	else {
		
		log_to_file("bankAp.txt","Gracz %s wplacil do banku %d ap. (%d / %d) <%s> <%s>",playerName,getAccountLimit(id) - getAccountValue(id),getAccountLimit(id),getAccountLimit(id),steamid,ip)
		setAccountValue(id, getAccountLimit(id))
	}
	zp_ap_set(id,0)
	
	formatex( szData , charsmax( szData ) , "%s#%d#%d#%d" , pinNumber , getAccountValue( id ) , getAccountLimit( id ) , getAccountDebt( id ) );
	
	nvault_set( vaultHandle , szKey , szData );
}

setAccountName( id , szName[] ){
	copy( playersInformations[ id ][ accountName ] , MAX_LEN_STRUCT - 1 , szName );
}

getAccountName( id , szName[] , maxLen ){
	copy( szName , maxLen , playersInformations[ id ][ accountName ] );
}

setAccountCreated( id , bool:stateAccount ){
	playersInformations[ id ][ accountCreated ] = stateAccount;
}

bool:getAccountCreated( id ){
	return bool:playersInformations[ id ][ accountCreated ];
}

setAccountPin( id , szPin[] ){
	copy( playersInformations[ id ][ accountPin ] , MAX_LEN_STRUCT - 1 , szPin );
}

getAccountPin( id , szPin[] , maxLen ){
	copy( szPin , maxLen , playersInformations[ id ][ accountPin ] );
}

setAccountValue( id , value ){
	playersInformations[ id ][ accountValue ] = value;
}

getAccountValue( id ){
	return playersInformations[id][accountValue];
}

setAccountLogged( id , bool:stateAccount ){
	playersInformations[ id ][ accountLogged ] = stateAccount;
}

bool:getAccountLogged( id ){
	return bool:playersInformations[ id ][ accountLogged ];
}

setAccountTry( id , numberTry ){
	playersInformations[ id ][ accountTry ] = numberTry;
}

getAccountTry( id ){
	return playersInformations[ id ][ accountTry ];
}

setAccountLimit( id , numberLimit ){
	playersInformations[ id ][ accountLimitValue ] = numberLimit;
}

getAccountLimit( id ){
	return playersInformations[ id ][ accountLimitValue ];
}

setAccountAuth( id , bool:auth ){
	playersInformations[ id ][ accountAuth ] = auth;
}

bool: getAccountAuth( id ){
	return bool:playersInformations[ id ][ accountAuth ];
}

setAccountDebt( id , value ){
	playersInformations[ id ][ accountDebt ] = value;
}

getAccountDebt( id ){
	return playersInformations[ id ][ accountDebt ];
}

clearUserInformations( id ){
	setAccountCreated( id , false );
	setAccountName( id , "" );
	setAccountPin( id , "" );
	setAccountValue( id , 0 );
	setAccountLogged( id , false );
	setAccountTry( id , 0 );
	setAccountLimit( id , 0 );
	setAccountAuth( id , false );
	setAccountDebt( id , 0 );
}
